Write Python functions for a frequency shift keying (FSK) modulator and demodulator along with functions to display the signals and bits with overlays use plotly so the figures can be interacted with. 

# Modulator 

The modulator does not need to be continuous-phase FSK (CPFSK), but it can introduce a short taper at the symbol edges such as a 5-10% Hann. A binary zero will be f0 with a default of 1000 Hz and a binary 1 will be f1 with a frequency of 2000 Hz. Also do not use Manchester encoding. The baud rate can be specified, but has a default of 100 symbols per second. The sample rate will default to 44100 Hz and the functions will verify that the baud rate is rationalized with respect to the sample rate. Rationalized is defined that the Samples/symbol = fs / baud is an integer. The functions will generate and error message if the rate is not rationalized. Do not use a Polyphase resampler to rationalize samples/symbol to keep the design simple. Also the parameters must be checked to verify the samples/symbol is an integer to put tones on near-integer FFT bins. Perform an on-bin check that f0*N/fs and f1*N/fs are integers. Also perform and orthogonality check that f1 - f0 = m/Tsym which is an integer. If any of these checks fail there should be an error message since this is test code. In the future may us off-bin Goertzel or resampling but not for this baseline design. The FSK is sent as real values over a sound card. The packet will be limited to a constant exact transmitted length of 32 bytes to prevent the effects from drift and jitter from growing above an 1/8 of a bit time. The packet will not have a header just the original data of 32 bytes. A configurable guard time will be used to limit the packet transmit rate. A warning should be given if the guard time is specified is too sort for the packet parameters. 

# Demodulator 

Packet detection and demodulation doesn't need to be done in realtime to allow the entire packet signal to be processed at once to improve detectability. For this demodulator there is plenty of memory so the entire FSK sequence for the packet can be recorded and analyzed or demodulated in offline whole-packet processing. First there will be a packet detection, then demodulation. Packet detection will be with a CFAR energy gate checking |X(fo)|^2 + |X(f1)|^2 in sliding windows vs a noise estimate. In other words tone energies compared to overall energy and take a noise estimate (off-tone bins or band) and a configurable false-alarm target (e.g., Pfa=1e−3). Also use the fact a packet is 32 bytes and has a guard time between the next packet. For the packet demodulation the filters will be coherent FFT/Goertzel filters. For now assume the sound card's phase drift will not be large enough to spoil coherent accumulation. Also for now assume no echoes/room acoustics/clipping is not a problem because the transmitting and receiving sound card will be connected by a cable. Assume speakers/mics, short multipath and AGC/clipping are not an issue because the sound cards are connected by a cable. The packet demodulation can occur after the entire packet has been received to provide more flexibility for the packet detection mechanism. The raw real input should be converted to an analytic signal (Hilbert) once, at the start—not the filter outputs to preserve instantaneous phase for coherent methods. For each symbol window under each timing hypothesis, compute complex R0 and R1 using FFT or Goertzel. The packet detection parameters should be configurable. The goal is to not worry about computational efficiency, but to maximize the ability to detect the packet and demodulate the packet bits.