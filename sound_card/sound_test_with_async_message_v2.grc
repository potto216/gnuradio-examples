options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: sound_test_with_chirp
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Sound test with chirp
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: access_key
  id: variable
  parameters:
    comment: ''
    value: '''11100001010110101110100010010011'''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [808, 16.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '44100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: sine_freq
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '10'
    step: '10'
    stop: '20000'
    value: '12000'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 16.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '0.005'
    comment: ''
    freq: sine_freq
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    showports: 'False'
    type: float
    waveform: analog.GR_SIN_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [56, 128.0]
    rotation: 0
    state: enabled
- name: audio_sink_0
  id: audio_sink
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    device_name: ''
    num_inputs: '1'
    ok_to_block: 'True'
    samp_rate: samp_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1104, 288.0]
    rotation: 0
    state: enabled
- name: audio_source_0
  id: audio_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    device_name: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '1'
    ok_to_block: 'True'
    samp_rate: samp_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1104, 392.0]
    rotation: 180
    state: enabled
- name: blocks_message_strobe_0
  id: blocks_message_strobe
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    msg: pmt.cons(pmt.make_dict(), pmt.to_pmt([0.18, 0.52, 0.86, 0.120, -0.18, -0.52,
      -0.86, 0.120]))
    period: '100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [88, 264.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport pmt\n\nclass\
      \ msg_injector(gr.sync_block):\n    def __init__(self):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Message Injector',\n            in_sig=[np.float32],\
      \   # Now accepts a continuous float stream as input\n            out_sig=[np.float32],\n\
      \        )\n        # Register the message input port.\n        self.message_port_register_in(pmt.intern(\"\
      in\"))\n        self.set_msg_handler(pmt.intern(\"in\"), self.handle_msg)\n\
      \        # Buffer to hold injected message payload samples.\n        self.buffer\
      \ = np.array([], dtype=np.float32)\n\n    def handle_msg(self, msg):\n     \
      \   # Check that msg is a pair (dict, payload)\n        if pmt.is_pair(msg):\n\
      \            payload = pmt.cdr(msg)\n            # Convert the PMT payload to\
      \ a Python list.\n            # This assumes the payload was created as a PMT\
      \ float vector.\n            data = np.array(pmt.to_python(payload), dtype=np.float32)\n\
      \            # Append the new message data to the current buffer.\n        \
      \    self.buffer = np.concatenate([self.buffer, data])\n\n    def work(self,\
      \ input_items, output_items):\n        # Get the continuous input stream.\n\
      \        in0 = input_items[0]\n        out = output_items[0]\n        num_output_items\
      \ = len(out)\n\n        # Start by copying the input stream to output.\n   \
      \     out[:] = in0[:num_output_items]\n\n        # If we have any message data\
      \ buffered, add it onto the first samples.\n        if self.buffer.size > 0:\n\
      \            n = min(num_output_items, self.buffer.size)\n            out[:n]\
      \ += self.buffer[:n]\n            # Remove the consumed samples from the buffer.\n\
      \            self.buffer = self.buffer[n:]\n\n        return num_output_items\n\
      \n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Message Injector', 'msg_injector', [], [('0', 'float', 1), ('in',
      'message', 1)], [('0', 'float', 1)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [672, 232.0]
    rotation: 0
    state: enabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import math
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [448, 16.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'True'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Output Sine
    label10: Signal 10
    label2: Input Sine
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '2'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1096, 168.0]
    rotation: 0
    state: enabled

connections:
- [analog_sig_source_x_0, '0', epy_block_0, '0']
- [audio_source_0, '0', qtgui_time_sink_x_0, '1']
- [blocks_message_strobe_0, strobe, epy_block_0, in]
- [epy_block_0, '0', audio_sink_0, '0']
- [epy_block_0, '0', qtgui_time_sink_x_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.9.2
